'use client'

import { useState, useEffect } from 'react'
import { Send, Mail, Globe, RefreshCw, FileText, Download } from 'lucide-react'
import toast from 'react-hot-toast'

interface Email {
  id: string
  address: string
  contacted: boolean
  domain: {
    id: string
    url: string
    contacted: boolean
    analysis?: {
      id: string
      title?: string
      description?: string
      priorityFixes: string[]
      recommendations: string[]
    }
  }
  createdAt: string
}

export default function OutreachTab() {
  const [emails, setEmails] = useState<Email[]>([])
  const [loading, setLoading] = useState(false)
  const [sending, setSending] = useState<string | null>(null)

  const fetchEmails = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/domains?run=1&includeEmails=true')
      const data = await response.json()
      
      if (response.ok) {
        // Flatten emails from all domains
        const allEmails: Email[] = []
        data.domains.forEach((domain: any) => {
          domain.emails.forEach((email: any) => {
            allEmails.push({
              ...email,
              domain: {
                id: domain.id,
                url: domain.url,
                contacted: domain.contacted
              }
            })
          })
        })
        setEmails(allEmails)
      } else {
        toast.error(data.error || 'Failed to fetch emails')
      }
    } catch (error) {
      toast.error('Failed to fetch emails')
    } finally {
      setLoading(false)
    }
  }

  const generateAnalysisReport = (email: Email): string => {
    return `
# Website Analysis Report for ${email.domain.url}

## Basic Information
- **Domain**: ${email.domain.url}
- **Analysis Date**: ${new Date().toLocaleDateString()}

## Contact Information Found
- **Email**: ${email.address}

## ðŸš¨ Priority Fixes Needed
Based on our analysis of your website, here are the critical issues that need immediate attention:

1. **SSL Certificate**: Ensure your website has a valid SSL certificate for security and SEO
2. **Meta Description**: Add a compelling meta description for better search engine visibility
3. **Mobile Optimization**: Make sure your website is mobile-friendly
4. **Page Speed**: Optimize your website's loading speed for better user experience
5. **Contact Information**: Ensure your contact details are easily accessible

## ðŸ“‹ Additional Recommendations
- Add a contact form for better customer engagement
- Create an "About Us" page to build trust
- Add customer testimonials for social proof
- Implement Google Analytics for tracking
- Add social media links for better engagement
- Create a blog for content marketing
- Add FAQ section for common questions

## How We Can Help
We specialize in website optimization and can help you implement these improvements to:
- Increase your search engine rankings
- Improve user experience
- Generate more leads and sales
- Build trust with your customers

Would you be interested in a free consultation to discuss how we can help improve your website?

Best regards,
[Your Name]

---
This analysis was generated by our automated website analysis tool.
If you'd prefer not to receive future emails, please let us know.
    `.trim()
  }

  const sendOutreachEmail = async (emailId: string, includeReport: boolean = false) => {
    setSending(emailId)
    try {
    const response = await fetch('/api/outreach?run=1', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ emailId, includeReport })
      })

      const data = await response.json()
      
      if (response.ok) {
        toast.success(includeReport ? 'Email with analysis report sent successfully!' : 'Email sent successfully!')
        // Refresh the list
        fetchEmails()
      } else {
        toast.error(data.error || 'Failed to send email')
      }
    } catch (error) {
      toast.error('Failed to send email')
    } finally {
      setSending(null)
    }
  }

  const sendBulkEmails = async () => {
    // Use the same prioritization logic as the display
    const uncontacted = emails.filter(email => !email.contacted)
    const emailsByDomain = new Map<string, Email[]>()
    
    // Group emails by domain
    uncontacted.forEach(email => {
      const domainId = email.domain.id
      if (!emailsByDomain.has(domainId)) {
        emailsByDomain.set(domainId, [])
      }
      emailsByDomain.get(domainId)!.push(email)
    })
    
    // Select 1 prioritized email per domain
    const prioritizedEmails: Email[] = []
    emailsByDomain.forEach((domainEmails, domainId) => {
      const priorityKeywords = ['team', 'contact', 'support']
      const priorityEmails = domainEmails.filter(email => {
        const emailLocal = email.address.split('@')[0].toLowerCase()
        return priorityKeywords.some(keyword => emailLocal.includes(keyword))
      })
      const selectedEmail = priorityEmails.length > 0 ? priorityEmails[0] : domainEmails[0]
      prioritizedEmails.push(selectedEmail)
    })
    
    if (prioritizedEmails.length === 0) {
      toast.error('No uncontacted emails to send')
      return
    }

    console.log(`ðŸ“¤ DEV DEBUG: Bulk sending to ${prioritizedEmails.length} prioritized emails (1 per domain)`)
    let successCount = 0
    let errorCount = 0

    for (const email of prioritizedEmails) {
      try {
        const response = await fetch('/api/outreach?run=1', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ emailId: email.id })
        })

        if (response.ok) {
          successCount++
        } else {
          errorCount++
        }

        // Small delay between emails to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000))
      } catch (error) {
        errorCount++
      }
    }

    toast.success(`Bulk send complete: ${successCount} sent, ${errorCount} failed`)
    fetchEmails()
  }

  useEffect(() => {
    fetchEmails()
  }, [])

  // Refresh emails when tab becomes active
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        fetchEmails()
      }
    }
    
    document.addEventListener('visibilitychange', handleVisibilityChange)
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange)
  }, [])

  // Get 1 prioritized email per domain (uncontacted only)
  const uncontactedEmails = (() => {
    const uncontacted = emails.filter(email => !email.contacted)
    const emailsByDomain = new Map<string, Email[]>()
    
    // Group emails by domain
    uncontacted.forEach(email => {
      const domainId = email.domain.id
      if (!emailsByDomain.has(domainId)) {
        emailsByDomain.set(domainId, [])
      }
      emailsByDomain.get(domainId)!.push(email)
    })
    
    // Select 1 prioritized email per domain
    const prioritizedEmails: Email[] = []
    emailsByDomain.forEach((domainEmails, domainId) => {
      // Priority keywords to look for in email addresses
      const priorityKeywords = ['team', 'contact', 'support']
      
      // Find emails with priority keywords
      const priorityEmails = domainEmails.filter(email => {
        const emailLocal = email.address.split('@')[0].toLowerCase()
        return priorityKeywords.some(keyword => emailLocal.includes(keyword))
      })
      
      // Use priority email if found, otherwise use first email
      const selectedEmail = priorityEmails.length > 0 ? priorityEmails[0] : domainEmails[0]
      prioritizedEmails.push(selectedEmail)
      
      console.log(`ðŸŽ¯ DEV DEBUG: Domain ${selectedEmail.domain.url} - Selected: ${selectedEmail.address} ${priorityEmails.length > 0 ? '(PRIORITY)' : '(DEFAULT)'}`)
    })
    
    console.log(`ðŸ“§ DEV DEBUG: Showing ${prioritizedEmails.length} emails (1 per domain) from ${emailsByDomain.size} domains`)
    return prioritizedEmails
  })()
  
  const contactedEmails = emails.filter(email => email.contacted)

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Email Outreach</h2>
          <p className="text-gray-600">Send outreach emails to scraped contacts. Use "Send Report" to include website analysis findings.</p>
        </div>
        <button
          onClick={() => fetchEmails()}
          className="btn-secondary flex items-center gap-2"
        >
          <RefreshCw className="w-4 h-4" />
          Refresh
        </button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-purple-50 p-4 rounded-lg">
          <div className="flex items-center gap-2">
            <Globe className="w-5 h-5 text-purple-600" />
            <span className="text-sm font-medium text-purple-900">Domains with Emails</span>
          </div>
          <p className="text-2xl font-bold text-purple-900 mt-1">{new Set(emails.map(e => e.domain.id)).size}</p>
        </div>
        
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="flex items-center gap-2">
            <Mail className="w-5 h-5 text-blue-600" />
            <span className="text-sm font-medium text-blue-900">Total Emails</span>
          </div>
          <p className="text-2xl font-bold text-blue-900 mt-1">{emails.length}</p>
        </div>
        
        <div className="bg-orange-50 p-4 rounded-lg">
          <div className="flex items-center gap-2">
            <Mail className="w-5 h-5 text-orange-600" />
            <span className="text-sm font-medium text-orange-900">Not Contacted</span>
          </div>
          <p className="text-2xl font-bold text-orange-900 mt-1">{uncontactedEmails.length}</p>
          <p className="text-xs text-orange-700 mt-1">1 per domain</p>
        </div>
        
        <div className="bg-green-50 p-4 rounded-lg">
          <div className="flex items-center gap-2">
            <Mail className="w-5 h-5 text-green-600" />
            <span className="text-sm font-medium text-green-900">Contacted</span>
          </div>
          <p className="text-2xl font-bold text-green-900 mt-1">{contactedEmails.length}</p>
        </div>
      </div>

      {/* Actions */}
      <div className="flex gap-4">
        <button
          onClick={fetchEmails}
          disabled={loading}
          className="btn-secondary flex items-center gap-2"
        >
          <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
          Refresh
        </button>
        
        {uncontactedEmails.length > 0 && (
          <button
            onClick={sendBulkEmails}
            className="btn-primary flex items-center gap-2"
          >
            <Send className="w-4 h-4" />
            Send All ({uncontactedEmails.length})
          </button>
        )}
      </div>

      {/* Emails List */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">
          Uncontacted Emails ({uncontactedEmails.length})
        </h3>
        
        {uncontactedEmails.length > 0 ? (
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {uncontactedEmails.map((email) => (
              <div key={email.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Mail className="w-4 h-4 text-gray-500" />
                    <div>
                      <p className="font-medium text-gray-900">{email.address}</p>
                      <div className="flex items-center gap-2 text-sm text-gray-500">
                        <Globe className="w-3 h-3" />
                        <span>{email.domain.url}</span>
                        {email.domain.analysis && (
                          <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full flex items-center gap-1">
                            <FileText className="w-3 h-3" />
                            Analysis Available
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <button
                      onClick={() => sendOutreachEmail(email.id, false)}
                      disabled={sending === email.id}
                      className="btn-primary flex items-center gap-2"
                    >
                      <Send className="w-4 h-4" />
                      {sending === email.id ? 'Sending...' : 'Send'}
                    </button>
                    <button
                      onClick={() => sendOutreachEmail(email.id, true)}
                      disabled={sending === email.id || !email.domain.analysis}
                      className={`flex items-center gap-2 ${
                        email.domain.analysis 
                          ? 'btn-secondary' 
                          : 'bg-gray-100 text-gray-400 cursor-not-allowed px-4 py-2 rounded-md'
                      }`}
                      title={!email.domain.analysis ? 'No analysis report available for this domain' : ''}
                    >
                      <FileText className="w-4 h-4" />
                      {sending === email.id ? 'Sending...' : 'Send Report'}
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            No uncontacted emails available
          </div>
        )}

        {contactedEmails.length > 0 && (
          <>
            <h3 className="text-lg font-semibold text-gray-900 mt-8">
              Contacted Emails ({contactedEmails.length})
            </h3>
            
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {contactedEmails.map((email) => (
                <div key={email.id} className="border border-green-200 bg-green-50 rounded-lg p-4">
                  <div className="flex items-center gap-3">
                    <Mail className="w-4 h-4 text-green-600" />
                    <div>
                      <p className="font-medium text-green-900">{email.address}</p>
                      <div className="flex items-center gap-2 text-sm text-green-700">
                        <Globe className="w-3 h-3" />
                        <span>{email.domain.url}</span>
                        <span className="px-2 py-1 text-xs bg-green-200 text-green-800 rounded-full">
                          Contacted
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  )
}
