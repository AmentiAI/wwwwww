import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { sendEmail, generateOutreachEmail } from '@/lib/email-sender'

// Force dynamic rendering
export const dynamic = 'force-dynamic'
export const runtime = 'nodejs'
export const revalidate = 0

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  
  // Require ?run=1 to prevent build-time execution
  if (searchParams.get('run') !== '1') {
    return NextResponse.json({ error: 'Add ?run=1 to execute' }, { status: 400 })
  }
  
  return NextResponse.json({ message: 'This endpoint only accepts POST requests' }, { status: 405 })
}

export async function POST(request: NextRequest) {
  try {
    const { searchParams } = request.nextUrl
    
    // Require ?run=1 to prevent build-time execution
    if (searchParams.get('run') !== '1') {
      return NextResponse.json({ error: 'Add ?run=1 to execute' }, { status: 400 })
    }
    
    const { emailId, includeReport } = await request.json()

    if (!emailId) {
      return NextResponse.json({ error: 'Email ID is required' }, { status: 400 })
    }

    // Get email and domain info
    const emailRecord = await prisma.email.findUnique({
      where: { id: emailId },
      include: { 
        domain: {
          include: {
            analysis: true
          }
        }
      }
    })

    if (!emailRecord) {
      return NextResponse.json({ error: 'Email not found' }, { status: 404 })
    }

    if (emailRecord.contacted) {
      return NextResponse.json({ error: 'Email already contacted' }, { status: 400 })
    }

    let subject: string
    let text: string

    if (includeReport && emailRecord.domain.analysis) {
      // Generate email with analysis report
      subject = `Website Analysis Report for ${emailRecord.domain.url}`
      
      const analysis = emailRecord.domain.analysis
      text = `
Hello,

I hope this email finds you well. I recently analyzed your website ${emailRecord.domain.url} and wanted to share some insights that could help improve your online presence.

## Website Analysis Summary

**Title**: ${analysis.title || 'Not found'}
**Description**: ${analysis.description || 'Not found'}

## ðŸš¨ Priority Issues to Address

${analysis.priorityFixes.length > 0 ? analysis.priorityFixes.map(fix => `- ${fix}`).join('\n') : 'No critical issues found'}

## ðŸ“‹ Key Recommendations

${analysis.recommendations.slice(0, 5).map(rec => `- ${rec}`).join('\n')}

## How We Can Help

We specialize in website optimization and can help you implement these improvements to:
- Increase your search engine rankings
- Improve user experience and conversion rates
- Generate more leads and sales
- Build trust with your customers

Would you be interested in a free consultation to discuss how we can help improve your website?

Best regards,
[Your Name]

---
This analysis was generated by our automated website analysis tool.
If you'd prefer not to receive future emails, please let us know.
      `.trim()
    } else {
      // Generate standard outreach email
      const emailContent = generateOutreachEmail(
        emailRecord.domain.url,
        emailRecord.address
      )
      subject = emailContent.subject
      text = emailContent.text
    }

    // Send email
    const emailConfig = {
      user: process.env.EMAIL_USER!,
      pass: process.env.EMAIL_PASS!,
    }

    const emailSent = await sendEmail(
      emailRecord.address,
      subject,
      text,
      emailConfig
    )

    if (emailSent) {
      // Mark email and domain as contacted
      await prisma.email.update({
        where: { id: emailId },
        data: { contacted: true }
      })

      await prisma.domain.update({
        where: { id: emailRecord.domainId },
        data: { contacted: true }
      })

      return NextResponse.json({ 
        success: true, 
        message: includeReport ? 'Email with analysis report sent successfully' : 'Email sent successfully' 
      })
    } else {
      return NextResponse.json(
        { error: 'Failed to send email' },
        { status: 500 }
      )
    }
  } catch (error) {
    console.error('Outreach API error:', error)
    return NextResponse.json(
      { error: 'Failed to send outreach email' },
      { status: 500 }
    )
  }
}
